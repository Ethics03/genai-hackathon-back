// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    String       @id @default(cuid())
  name      String       @db.VarChar(100)
  email     String       @unique @db.VarChar(150)
  username  String       @unique @db.VarChar(100)
  bio       String?      @db.VarChar(300)
  house     House[]
  sleep     SleepEntry[]
  activity  UserActivity[]
  gmailTokens GmailToken[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
}

model House {
  houseId     String @id @default(cuid())
  userId      String
  name        String @unique
  description String
  color       String
  motto       String
  user        Users  @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model SleepEntry {
  sleepId      String   @id @default(cuid())
  userId       String   @unique
  bedTime      DateTime
  wakeTime     DateTime
  sleepDate    DateTime @db.Date
  reason       String
  sleepQuality Float?
  duration     Float?   @map("duration")
  user         Users    @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, sleepDate])
  @@index([sleepDate])
}

model UserActivity {
  id    String  @id @default(cuid())
  userId String
  date  DateTime  @db.Date

  user Users @relation(fields: [userId],references: [userId], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@unique([userId, date])
  @@index([date])
}


model GmailToken {
  id            String   @id @default(cuid())
  userId        String
  
  // Encrypted token storage for security
  accessTokenEncrypted String   @db.Text
  accessTokenIv        String   @db.VarChar(32)
  accessTokenTag       String   @db.VarChar(32)
  
  refreshTokenEncrypted String?  @db.Text
  refreshTokenIv        String?  @db.VarChar(32)
  refreshTokenTag       String?  @db.VarChar(32)
  
  // Token metadata
  tokenType     String   @default("Bearer")
  scope         String?  @db.Text
  expiresAt     DateTime?
  
  // Security and tracking
  tokenHash     String   @db.VarChar(64) // SHA-256 hash for verification
  lastUsedAt    DateTime?
  isActive      Boolean  @default(true)
  
  // Relations
  user          Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@unique([userId]) // One Gmail token per user
  @@index([userId])
  @@index([tokenHash])
  @@index([isActive])
  @@index([lastUsedAt])
}

enum Houses {
  luminara
  noctis
  solaris
}
